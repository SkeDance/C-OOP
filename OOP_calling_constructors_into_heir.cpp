#include <iostream>
#include <string>

using namespace std;

// Вызов конструкторов при наследовании
// Класс В включает класс А
class A
{ 
    public:
        //  Конструктор класса по умолчанию
        A()
        {
            msg = "empty";
        }
        //  Конструктор класса с одной переменной
        A(string msg)
        {
            this -> msg = msg;
        }
        //  Конструктор класса с двумя переменными
        A(string msg, int a)
        {
            this -> msg = msg;
            cout << msg << endl;
        }
        // Метод класса
        void printMsg(){
            cout << msg << endl;
        }
    private:
        string msg;
};

class B : public A
{
    public:
    //  Конструктор класса
        B():A("your new string", 5) // обращение к конструктору класса А происходит путем передачи переменных
        {
        
        }
};


int main(){


setlocale(LC_ALL, "ru");
// При наследовании вызывается конструктор по умолчанию
// В принципе, компилятор всегда старается вызвать конструктор по умолчанию
// Пользовательский конструктор вызывается в том случае, если мы передаём какие-то дополнительные параметры
    B b;
    b.printMsg();

    return 0;
}