#include <iostream>
#include <string>

using namespace std;

// Делегирующий конструктор
// Делегирующий конструктор - удоббство, предназначенное для того, чтобы написанный код программы был более эффективным, а также для более удобного его редактирования

// Рассмотрим пример применения делегирующего конструктора

class Human
{
    public:
        // // Ниже представлены 3 конструктора, каждый из которых отображает 3 варианта событий

        // // 1 Вариант - мы знаем только имя
        // Human(string Name)
        // {
        //     this -> Name = Name;
        //     this -> Age = 0;
        //     this -> Weight =0;
        // }

        // // 2 Вариант - мы знаем имя и возраст человека
        // Human(string Name, int Age)
        // {
        //     this -> Name = Name;
        //     this -> Age = Age;
        //     this Weight = 0;
        // }

        // // 3 Вариант - мы знаем имя, возраст и вес человека
        // Human(string Name, int Age, int Weight)
        // {
        //     this -> Age = Age;
        //     this -> Weight = Weight;
        //     this -> Name = Name;
        // }

        // Код выше представлен для сравнения с кодом, в котором применены делегирующие конструкторы
        // Однако, конструкция выше имеет существенный недостаток - ее тяжело редактировать в случае необходимости. При этом она слишком громоздка, что затрудняет чтение кода программы
        // Сложность редактирования заключается в следующем - в случае необходимости изменить логику присваивания хотя бы одному полю, то придется изменять каждый конструктор вручную
        // Чтобы устранить все эти недостатки, мы можем использовать делегирующие конструкторы

        Human(string Name)
        {
            this -> Name = Name + "!";
            this -> Age = 0;
            this -> Weight =0;
        }

        // Ко первому варианту вызываем другой конструктор этого же класса следующим образом 
        // 1 конструктор отличается от второго тем, что мы знаем кроме имени еще и вес человека, а логика присваивания имени и веса остаются прежними - поэтому строки кода с полями Name и Weight закомментированы 
        // В момент вызова конструктора для 2 варианта вызывается конструктор для 1 варианта, который умеет работать с полем Name, а поля Age и Weight инициализирует нулями. Именно он инициализирует поле Name согласно информации, переданной в конструктор
        // И лишь после этого вызывается конструктор второго варианта, который перезаписывает поле Age согласно информации, которую мы передали в функцию
        Human(string Name, int Age):Human(Name)
        {
            // this -> Name = Name;
            this -> Age = Age;
            // this Weight = 0;
        }

        // Третий вариант отличается тем, что здесь поялвяется информация о весе человека
        // Поэтому сначала вызывается конструктор второго варианта, умеющий работать с полями Age и Name, а затем конструктор 3 варианта
        // В теле конструктора 3 варинта оставить только работу с полем Weight, так как с другими полями работает конструктор 2 варианта
        Human(string Name, int Age, int Weight):Human(Name, Age)
        {
            //this -> Age = Age;
            this -> Weight = Weight;
            //this -> Name = Name;
        }



        string Name;
        int Age;
        int Weight;
};

int main()
{
    // При установке точек остановки в следующим образом 
    // 1 вариант this -> Name = Name;
    // 2 Вариант this -> Age = Age;
    // 3 вариант this -> Weight = Weight;
    // Можно увидеть порядок вызова конструткоров 

    // В случае, если необходимо изменить логику присваивания значений какому-либо полю, нет необходимости делать это в каждом конструкторе класса
    // Достаточно это сделать к конструкторе, который умеет работать с полем, в котором мы хотим изменить логику присваивания
    // Для примера приведен конструктор 1 варианта, который умеет работать с полем Name - помимо полученного значения при вызове конструктора добавляется восклицательный знак - "!"
    // Если есть необходимость изменить логику присваивания для поля Name, то редактировать необходимо конструктор 2 варианта

    Human human("Аристарх", 30, 70);

    
    cout << human.Name << endl << human.Age << endl << human.Weight << endl;



    return 0;
}