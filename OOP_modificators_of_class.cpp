#include <iostream>
#include <string>

using namespace std;

// Модификаторы класса 

// Поведение при наследовании для переменых и методово одинаковое


class A
{
    // public поле доступно всем и везде, как на уровне объекта класса (обращение через точку, например b.msgOne), так и при наследовании в использовании внутри класса наследника (создание отдельного метода с использованием поля)

    public:// и для наследников
        string msgOne = "Message 1";
    
    // если поле private, то оно закрыто ото всех, кроме конкретного класса, в котором оно было создано, то есть ни внутри класса наследника, ни на уровне объекта класса(через точку), мы к такому полю либо методу обратиться не можем 
    private:// только для класса А
        string msgTwo = "Message 2";

    // если поле protected, то это что-то "среднее" между public и private, то есть на уровне объекта мы к protected полю обратиться не можем, но внутри класса наследника мы можем обращаться к таким полям
    protected: 
        string msgThree = "Message 3";
};

// Модификатор доступа при наследовании
// При public наследовании все поля остаются при своих модификаторах
// При private наследовании все поля становятся private
// При protected наследовании поле public -> protected, остальные - без изменений 
class B : public A
{
    public:
        // Обращение внутри класса наследника
        void PrintMsg(){
            cout << msgThree << endl;
        }

};

int main(){

    setlocale(LC_ALL, "ru");

    B b;
    b.PrintMsg(); // Обращение к объекту класса
    cout << b.msgOne << endl;// Обращение к объекту класса



    return 0;
}