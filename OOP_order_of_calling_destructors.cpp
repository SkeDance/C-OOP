#include <iostream>
#include <string>

using namespace std;

// Вызов деструкторов при наследовании
// Класс С включает класса В, а класс В включает класс А
class A
{

    public:
    // Конструктор класса
        A()
        {
            cout << "Constructor A" << endl;
        }

    // Деструктор класса
        ~A()
        {
            cout << "Destructor A" << endl;
        }
};

class B : public A
{
    public:
    //  Конструктор класса
        B()
        {
            cout << "Constructor B" << endl;
        }

    // Деструктор класса
        ~B()
        {
            cout << "Destructor B" << endl;
        }
};

class C: public B
{
    public:
    //  Конструктор класса
        C()
        {
            cout << "Constructor C" << endl;
        }

    // Деструктор класса
        ~C()
        {
            cout << "Destructor C" << endl;
        }
};

int main(){


setlocale(LC_ALL, "ru");

// При создании класса С сначала вызывается конструктор класса А, заетем конструктор класса В, и только после этого конструктор класса С
// Это происходит из-за того, что класс С включает в себя класс В, который включает в себя класс А, то есть объект класса С не может существовать без объекта класса В, а класс В не может существовать без класса А
// Деструкторы разбираются всегда в обратном порядке


    C c;
    cout << endl << endl;


    return 0;
}