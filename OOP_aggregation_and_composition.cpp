#include <iostream>
#include <string>

using namespace std;

// Агрегация и композиция

// Агрегация и композиция - включение одного класса в другой, но с различными условиями дальнейшего использования включенных классов

// Композиция - возможность использовать включенный класс только с классом, в который он входит, так как включенный класс не может сущестовать вне другого класса

// Агрегация - возможность использовать класс с большим количеством других классов, то есть нет жесткой привязки к одному классу

// Что агрегация, что композиция - явления, когда один класс используется в другом, но по-разному

// Если речь идёт про агрегацию, то класс, который используется в другом классе, не зависим от него (В данном случае это классы Human и Cap), то есть класс Cap мы можем использовать с другим классом.
// Если речь идёт про композицию, то класс, который используется в другом классе, мы никак не сможем использовать без первого класса (в данном случае это классы Human и Brain).

// Необходим, чтобы показать принцип работы агрегации
// Класс Cap не имеет жесткой привзяки к классу Human, что является признаком агрегации
class Cap{

public:
    string GetColor()
    {
        return color;
    }
private:
    string color = "red";
};

// Необходим, чтобы показать, что класс Cap может использоваться с другими классами
class Dummy{

    public:
        void InspectDummy(){
            cout << "Cap is " << cap.GetColor() << endl;
        }

    private:
        Cap cap;
};

// Класс Human включает в себя класс Brain, который не может существовать вне первого класса. Таким образом мы используем композицию
// Класс Brain является вложенным классом
// Вызывая метод Think() в экземпляре класса Human, мы обращаемся к экземпляру класса Brain и вызываем еще один метод Think(), но уже принадлежащий классу Brain
// Такой способ вызовова метода (один метод Think() вызывает другой метод Think() называется делегирование)
// Стоит еще раз отметить, что при удалении класcа Human, будет удалён также и класс Brain
class Human
{
public:
    void Think(){
        brain.Think();
    }
     
    void InspectTheCap(){
        cout << "My cap is " << cap.GetColor() <<endl;
    }
   
private: 
    class Brain{
    public:
        void Think()
        {
            cout << "Я думаю" << endl;                
        }
    };

    Brain brain;
    Cap cap;
};

int main(){

    setlocale(LC_ALL, "ru");

    // Пример композиции в случае вызова метода Think() и пример агрегации в случае вызова метода InspectTheCap()
    Human human;
    human.Think();
    human.InspectTheCap();

    // Пример того, что класс Cap независит от других классов
    Dummy m;
    m.InspectDummy();




    return 0;
}